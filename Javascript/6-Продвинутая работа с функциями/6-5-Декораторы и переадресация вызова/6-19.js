// Результатом декоратора debounce(f, ms) должна быть обёртка, 
// которая передаёт вызов f не более одного раза в ms миллисекунд. 
// Другими словами, когда мы вызываем debounce, это гарантирует, 
// что все остальные вызовы будут игнорироваться в течение ms.
//
// На практике debounce полезен для функций, которые получают/обновляют данные, и мы знаем, 
// что повторный вызов в течение короткого промежутка времени не даст ничего нового. 
// Так что лучше не тратить на него ресурсы.
//----------------------------------------------------------//

"use strict"

function debounce(func, ms) {
  let lastCall;

  return function () {
    if ((Date.now() - lastCall) < ms) {
      return;
    }
    lastCall = Date.now();
    func.apply(this, arguments);
  }
}

let f = debounce(consoleLog, 1000);

function consoleLog(value) {
  console.log('HELLO', value)
}

f(1); // выполняется немедленно
f(2); // проигнорирован

setTimeout(() => f(3), 100); // проигнорирован (прошло только 100 мс)
setTimeout(() => f(4), 1100); // выполняется
setTimeout(() => f(5), 1500); // проигнорирован (прошло только 400 мс от последнего вызова)